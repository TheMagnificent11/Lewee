namespace Lewee.Blazor.ErrorHandling;

/// <summary>
/// Api Exception
/// </summary>
/// <remarks>
/// Copy-paste of the implementation that is code-generated by NSwag
/// </remarks>
public partial class ApiException : Exception
{
    /// <summary>
    /// Initializes a new instance of the <see cref="ApiException"/> class
    /// </summary>
    /// <param name="message">Error message</param>
    /// <param name="statusCode">HTTP status code</param>
    /// <param name="response">Response</param>
    /// <param name="headers">Headers</param>
    /// <param name="innerException">Inner exception</param>
    public ApiException(
        string message,
        int statusCode,
        string response,
        IReadOnlyDictionary<string, IEnumerable<string>> headers,
        Exception innerException)
        : base(
            message + "\n\nStatus: "
                + statusCode + "\nResponse: \n"
                + (response == null ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)),
            innerException)
    {
        this.StatusCode = statusCode;
        this.Response = response ?? string.Empty;
        this.Headers = headers;
    }

    /// <summary>
    /// Gets the HTTP status code
    /// </summary>
    public int StatusCode { get; }

    /// <summary>
    /// Gets the response
    /// </summary>
    public string Response { get; }

    /// <summary>
    /// Gets the headers
    /// </summary>
    public IReadOnlyDictionary<string, IEnumerable<string>> Headers { get; }

    /// <inheritdoc />
    public override string ToString()
    {
        return string.Format("HTTP Response: \n\n{0}\n\n{1}", this.Response, base.ToString());
    }
}

/// <summary>
/// Typed API Exception
/// </summary>
/// <typeparam name="TResult">Result type</typeparam>
public partial class ApiException<TResult> : ApiException
{
    /// <summary>
    /// Initializes a new instance of the <see cref="ApiException{TResult}"/> class
    /// </summary>
    /// <param name="message">Error message</param>
    /// <param name="statusCode">HTTP status code</param>
    /// <param name="response">Response</param>
    /// <param name="headers">Headers</param>
    /// <param name="result">Result</param>
    /// <param name="innerException">Inner exception</param>
    public ApiException(
        string message,
        int statusCode,
        string response,
        IReadOnlyDictionary<string, IEnumerable<string>> headers,
        TResult result,
        Exception innerException)
        : base(message, statusCode, response, headers, innerException)
    {
        this.Result = result;
    }

    /// <summary>
    /// Gets the result
    /// </summary>
    public TResult Result { get; }
}
